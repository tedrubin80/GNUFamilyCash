// File Locations:
// ./package.json
// ./.env.local  
// ./next.config.js
// ./tsconfig.json
// ./tailwind.config.js
// ./prisma/schema.prisma

{
  "package.json": {
    "name": "family-gnucash",
    "version": "0.1.0",
    "private": true,
    "scripts": {
      "dev": "next dev",
      "build": "next build",
      "start": "next start",
      "lint": "next lint",
      "db:generate": "prisma generate",
      "db:push": "prisma db push",
      "db:migrate": "prisma migrate dev",
      "db:studio": "prisma studio"
    },
    "dependencies": {
      "next": "14.0.0",
      "react": "^18",
      "react-dom": "^18",
      "next-auth": "^4.24.5",
      "@prisma/client": "^5.6.0",
      "@next-auth/prisma-adapter": "^1.0.7",
      "bcryptjs": "^2.4.3",
      "mysql2": "^3.6.5",
      "googleapis": "^128.0.0",
      "csv-parser": "^3.0.0",
      "papaparse": "^5.4.1",
      "date-fns": "^2.30.0",
      "zod": "^3.22.4",
      "lucide-react": "^0.263.1",
      "tailwindcss": "^3.3.0",
      "autoprefixer": "^10.0.1",
      "postcss": "^8"
    },
    "devDependencies": {
      "typescript": "^5",
      "@types/node": "^20",
      "@types/react": "^18",
      "@types/react-dom": "^18",
      "@types/bcryptjs": "^2.4.6",
      "@types/papaparse": "^5.3.14",
      "prisma": "^5.6.0",
      "eslint": "^8",
      "eslint-config-next": "14.0.0"
    }
  },

  ".env.local": `# Database
DATABASE_URL="mysql://username:password@localhost:3306/family_accounting"

# NextAuth.js
NEXTAUTH_SECRET="your-super-secret-key-here"
NEXTAUTH_URL="http://localhost:3000"

# Google Drive Integration
GOOGLE_CLIENT_ID="your-google-client-id"
GOOGLE_CLIENT_SECRET="your-google-client-secret"
GOOGLE_REFRESH_TOKEN="your-google-refresh-token"

# App Settings
APP_NAME="Family GnuCash"
DEFAULT_CURRENCY="USD"`,

  "next.config.js": `/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    serverComponentsExternalPackages: ['mysql2']
  },
  env: {
    DATABASE_URL: process.env.DATABASE_URL,
    NEXTAUTH_SECRET: process.env.NEXTAUTH_SECRET,
    NEXTAUTH_URL: process.env.NEXTAUTH_URL,
  }
}

module.exports = nextConfig`,

  "tailwind.config.js": `/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './pages/**/*.{js,ts,jsx,tsx,mdx}',
    './components/**/*.{js,ts,jsx,tsx,mdx}',
    './app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      colors: {
        primary: {
          50: '#eff6ff',
          500: '#3b82f6',
          600: '#2563eb',
          700: '#1d4ed8',
        }
      }
    },
  },
  plugins: [],
}`,

  "tsconfig.json": `{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "es6"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}`,

  "prisma/schema.prisma": `// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  name      String
  password  String
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  accounts     Account[]
  transactions Transaction[]
  budgets      Budget[]

  @@map("users")
}

model Account {
  id             String   @id @default(cuid())
  name           String
  code           String?
  type           AccountType
  balance        Decimal  @default(0) @db.Decimal(15, 2)
  parentId       String?
  reconciled     Boolean  @default(false)
  lastReconciled DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  parent       Account?       @relation("AccountHierarchy", fields: [parentId], references: [id])
  children     Account[]      @relation("AccountHierarchy")
  splits       TransactionSplit[]
  budgetItems  BudgetItem[]

  @@map("accounts")
}

model Transaction {
  id          String   @id @default(cuid())
  date        DateTime
  description String
  reconciled  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user   User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  splits TransactionSplit[]

  @@map("transactions")
}

model TransactionSplit {
  id     String  @id @default(cuid())
  debit  Decimal @default(0) @db.Decimal(15, 2)
  credit Decimal @default(0) @db.Decimal(15, 2)

  // Relations
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  transactionId String
  account       Account     @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId     String

  @@map("transaction_splits")
}

model Budget {
  id        String   @id @default(cuid())
  name      String
  period    String   // YYYY-MM format
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user  User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  items BudgetItem[]

  @@map("budgets")
}

model BudgetItem {
  id       String  @id @default(cuid())
  budgeted Decimal @db.Decimal(15, 2)
  actual   Decimal @default(0) @db.Decimal(15, 2)

  // Relations
  budget    Budget  @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  budgetId  String
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId String

  @@map("budget_items")
}

enum UserRole {
  ADMIN
  USER
  READONLY
}

enum AccountType {
  ASSET
  LIABILITY
  INCOME
  EXPENSE
  EQUITY
}`
}