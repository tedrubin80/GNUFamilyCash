# .github/workflows/organize-files.yml
name: Organize Family GnuCash Project Files

on:
  workflow_dispatch:
    inputs:
      force_overwrite:
        description: 'Force overwrite existing files'
        required: false
        default: 'false'
        type: boolean
  push:
    branches: [ main, master ]
    paths:
      - '*.md'
      - '*.ts'
      - '*.tsx'
      - '*.js'
      - '*.json'
      - '*.css'

jobs:
  organize-files:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Create directory structure
      run: |
        echo "üèóÔ∏è Creating Next.js directory structure..."
        
        # Create main directories
        mkdir -p app/{admin,api,accounts,budgets,dashboard,login,reports,transactions,reconciliation,import-export}
        mkdir -p app/admin/{users,settings}
        mkdir -p app/api/{auth,admin,accounts,transactions,budgets,import,export}
        mkdir -p app/api/auth/[...nextauth]
        mkdir -p app/api/admin/{users,settings}
        mkdir -p app/api/transactions/[id]/reconcile
        mkdir -p components
        mkdir -p lib
        mkdir -p prisma
        mkdir -p types
        mkdir -p public
        
        echo "‚úÖ Directory structure created"

    - name: Organize configuration files
      run: |
        echo "üì¶ Organizing configuration files..."
        
        # Root configuration files
        files_to_move=(
          "package-json.json:package.json"
          "scripts/package-json.json:package.json"
          "project-config-files.json:package.json"
          "next-config.js:next.config.js"
          "tailwind-config.js:tailwind.config.js"
          "postcss-config.js:postcss.config.js"
          "tsconfig.json:tsconfig.json"
          "scripts/env-local.sh:.env.local.example"
        )
        
        for file_pair in "${files_to_move[@]}"; do
          IFS=':' read -r source dest <<< "$file_pair"
          if [[ -f "$source" ]]; then
            echo "Moving $source -> $dest"
            
            # Special handling for package.json files
            if [[ "$dest" == "package.json" ]]; then
              if [[ "$source" == *".json" ]]; then
                # Extract JSON content if it's wrapped in JS
                if grep -q '"name": "family-gnucash"' "$source"; then
                  if [[ "$source" == "project-config-files.json" ]]; then
                    # Extract the package.json section from the JS file
                    sed -n '/"package.json": {/,/^  },/p' "$source" | sed '1s/.*{/{/; $s/},/}/' > "$dest"
                  else
                    cp "$source" "$dest"
                  fi
                fi
              fi
            else
              cp "$source" "$dest"
            fi
          fi
        done
        
        # Create .env.local.example from template
        if [[ -f "scripts/env-local.sh" ]]; then
          cp "scripts/env-local.sh" ".env.local.example"
        fi
        
        echo "‚úÖ Configuration files organized"

    - name: Organize Prisma schema
      run: |
        echo "üóÑÔ∏è Organizing Prisma schema..."
        
        # Find and move Prisma schema
        schema_files=(
          "prisma/prisma-schema.txt"
          "prisma-schema.txt" 
          "nextjs-setup.json"
          "project-config-files.json"
        )
        
        for file in "${schema_files[@]}"; do
          if [[ -f "$file" ]]; then
            if [[ "$file" == *".json" ]]; then
              # Extract schema from JSON files
              if grep -q "prisma/schema.prisma" "$file"; then
                # Extract the schema content
                sed -n '/prisma\/schema.prisma/,/^}/p' "$file" | sed '1d; $d' > "prisma/schema.prisma"
                break
              fi
            else
              cp "$file" "prisma/schema.prisma"
              break
            fi
          fi
        done
        
        # Create seed file
        if [[ -f "prisma/seed.ts" ]]; then
          cp "prisma/seed.ts" "prisma/seed.ts"
        fi
        
        echo "‚úÖ Prisma files organized"

    - name: Organize app directory files
      run: |
        echo "üì± Organizing app directory files..."
        
        # App layout and providers
        layout_files=(
          "app/layout.ts:app/layout.tsx"
          "main-app-pages.ts:app/layout.tsx"
          "app/providers.ts:app/providers.tsx"
        )
        
        for file_pair in "${layout_files[@]}"; do
          IFS=':' read -r source dest <<< "$file_pair"
          if [[ -f "$source" ]]; then
            echo "Moving $source -> $dest"
            
            # Extract specific sections from combined files
            if [[ "$source" == "main-app-pages.ts" ]]; then
              if [[ "$dest" == "app/layout.tsx" ]]; then
                # Extract layout section
                sed -n '/=== \.\/app\/layout\.tsx ===/,/=== /p' "$source" | sed '1d; $d' > "$dest"
              fi
            else
              cp "$source" "$dest"
            fi
          fi
        done
        
        # Global CSS
        css_files=(
          "app/globals-css.css:app/globals.css"
          "app/globals.css:app/globals.css"
        )
        
        for file_pair in "${css_files[@]}"; do
          IFS=':' read -r source dest <<< "$file_pair"
          if [[ -f "$source" ]]; then
            cp "$source" "$dest"
            break
          fi
        done
        
        echo "‚úÖ App directory organized"

    - name: Organize page components
      run: |
        echo "üìÑ Organizing page components..."
        
        # Define page mappings
        declare -A page_mappings=(
          ["app/login/login-page.ts"]="app/login/page.tsx"
          ["app/dashboard/dashboard-page.ts"]="app/dashboard/page.tsx"
          ["main-app-pages.ts"]="multiple"
          ["final-pages-and-setup.ts"]="multiple"
        )
        
        # Extract dashboard page
        if [[ -f "app/dashboard/dashboard-page.ts" ]]; then
          cp "app/dashboard/dashboard-page.ts" "app/dashboard/page.tsx"
        fi
        
        # Extract login page
        if [[ -f "app/login/login-page.ts" ]]; then
          cp "app/login/login-page.ts" "app/login/page.tsx"
        fi
        
        # Extract from combined files
        if [[ -f "main-app-pages.ts" ]]; then
          # Extract accounts page
          sed -n '/=== \.\/app\/accounts\/page\.tsx ===/,/=== /p' "main-app-pages.ts" | sed '1d; $d' > "app/accounts/page.tsx"
          
          # Extract transactions page  
          sed -n '/=== \.\/app\/transactions\/page\.tsx ===/,/=== /p' "main-app-pages.ts" | sed '1d; $d' > "app/transactions/page.tsx"
        fi
        
        if [[ -f "final-pages-and-setup.ts" ]]; then
          # Extract budgets page
          sed -n '/=== \.\/app\/budgets\/page\.tsx ===/,/=== /p' "final-pages-and-setup.ts" | sed '1d; $d' > "app/budgets/page.tsx"
          
          # Extract reports page
          sed -n '/=== \.\/app\/reports\/page\.tsx ===/,/=== /p' "final-pages-and-setup.ts" | sed '1d; $d' > "app/reports/page.tsx"
          
          # Extract reconciliation page
          sed -n '/=== \.\/app\/reconciliation\/page\.tsx ===/,/=== /p' "final-pages-and-setup.ts" | sed '1d; $d' > "app/reconciliation/page.tsx"
          
          # Extract import-export page
          sed -n '/=== \.\/app\/import-export\/page\.tsx ===/,/=== /p' "final-pages-and-setup.ts" | sed '1d; $d' > "app/import-export/page.tsx"
        fi
        
        echo "‚úÖ Page components organized"

    - name: Organize API routes
      run: |
        echo "üîå Organizing API routes..."
        
        # NextAuth route
        if [[ -f "app/api/auth/nextauth-route.ts" ]]; then
          cp "app/api/auth/nextauth-route.ts" "app/api/auth/[...nextauth]/route.ts"
        elif [[ -f "auth-system.ts" ]]; then
          # Extract NextAuth route from combined file
          sed -n '/=== \.\/app\/api\/auth\/\[\.\.\.nextauth\]\/route\.ts ===/,/=== /p' "auth-system.ts" | sed '1d; $d' > "app/api/auth/[...nextauth]/route.ts"
        fi
        
        # Admin API routes
        if [[ -f "admin-panel.ts" ]]; then
          # Extract admin users route
          sed -n '/=== \.\/app\/api\/admin\/users\/route\.ts ===/,/=== /p' "admin-panel.ts" | sed '1d; $d' > "app/api/admin/users/route.ts"
        fi
        
        # Other API routes from components-and-apis.ts
        if [[ -f "components-and-apis.ts" ]]; then
          # Extract accounts route
          sed -n '/=== \.\/app\/api\/accounts\/route\.ts ===/,/=== /p' "components-and-apis.ts" | sed '1d; $d' > "app/api/accounts/route.ts"
          
          # Extract transactions route
          sed -n '/=== \.\/app\/api\/transactions\/route\.ts ===/,/=== /p' "components-and-apis.ts" | sed '1d; $d' > "app/api/transactions/route.ts"
        fi
        
        # Reconcile route
        if [[ -f "final-pages-and-setup.ts" ]]; then
          sed -n '/=== \.\/app\/api\/transactions\/\[id\]\/reconcile\/route\.ts ===/,/=== /p' "final-pages-and-setup.ts" | sed '1d; $d' > "app/api/transactions/[id]/reconcile/route.ts"
        fi
        
        echo "‚úÖ API routes organized"

    - name: Organize admin pages
      run: |
        echo "üëë Organizing admin pages..."
        
        if [[ -f "admin-panel.ts" ]]; then
          # Extract admin dashboard
          sed -n '/=== \.\/app\/admin\/page\.tsx ===/,/=== /p' "admin-panel.ts" | sed '1d; $d' > "app/admin/page.tsx"
          
          # Extract admin users page
          sed -n '/=== \.\/app\/admin\/users\/page\.tsx ===/,/=== /p' "admin-panel.ts" | sed '1d; $d' > "app/admin/users/page.tsx"
          
          # Extract admin settings page
          sed -n '/=== \.\/app\/admin\/settings\/page\.tsx ===/,/=== /p' "admin-panel.ts" | sed '1d; $d' > "app/admin/settings/page.tsx"
        fi
        
        echo "‚úÖ Admin pages organized"

    - name: Organize components
      run: |
        echo "üß© Organizing components..."
        
        # Navigation component
        if [[ -f "components/navigation-component.ts" ]]; then
          cp "components/navigation-component.ts" "components/Navigation.tsx"
        elif [[ -f "components-and-apis.ts" ]]; then
          # Extract Navigation from combined file
          sed -n '/=== \.\/components\/Navigation\.tsx ===/,/=== /p' "components-and-apis.ts" | sed '1d; $d' > "components/Navigation.tsx"
        fi
        
        # Extract other components from components-and-apis.ts
        if [[ -f "components-and-apis.ts" ]]; then
          component_names=(
            "AccountsList"
            "AddAccountForm" 
            "TransactionsList"
            "AddTransactionForm"
            "TransactionFilters"
          )
          
          for component in "${component_names[@]}"; do
            sed -n "/=== \.\/components\/${component}\.tsx ===/,/=== /p" "components-and-apis.ts" | sed '1d; $d' > "components/${component}.tsx"
          done
        fi
        
        echo "‚úÖ Components organized"

    - name: Organize lib files
      run: |
        echo "üìö Organizing lib files..."
        
        # Auth utilities
        if [[ -f "lib/auth.ts" ]]; then
          cp "lib/auth.ts" "lib/auth.ts"
        elif [[ -f "auth-system.ts" ]]; then
          sed -n '/=== \.\/lib\/auth\.ts ===/,/=== /p' "auth-system.ts" | sed '1d; $d' > "lib/auth.ts"
        fi
        
        # Database utilities
        if [[ -f "lib/database.ts" ]]; then
          cp "lib/database.ts" "lib/database.ts"
        elif [[ -f "database-utils.ts" ]]; then
          sed -n '/=== \.\/lib\/database\.ts ===/,/=== /p' "database-utils.ts" | sed '1d; $d' > "lib/database.ts"
        fi
        
        # Utils
        if [[ -f "lib/utils.ts" ]]; then
          cp "lib/utils.ts" "lib/utils.ts"
        elif [[ -f "database-utils.ts" ]]; then
          sed -n '/=== \.\/lib\/utils\.ts ===/,/=== /p' "database-utils.ts" | sed '1d; $d' > "lib/utils.ts"
        fi
        
        # Google Drive integration
        if [[ -f "database-utils.ts" ]]; then
          sed -n '/=== \.\/lib\/google-drive\.ts ===/,/=== /p' "database-utils.ts" | sed '1d; $d' > "lib/google-drive.ts"
        fi
        
        echo "‚úÖ Lib files organized"

    - name: Organize types
      run: |
        echo "üìù Organizing types..."
        
        if [[ -f "types/types-index.ts" ]]; then
          cp "types/types-index.ts" "types/index.ts"
        elif [[ -f "database-utils.ts" ]]; then
          sed -n '/=== \.\/types\/index\.ts ===/,/=== /p' "database-utils.ts" | sed '1d; $d' > "types/index.ts"
        fi
        
        echo "‚úÖ Types organized"

    - name: Organize middleware
      run: |
        echo "üõ°Ô∏è Organizing middleware..."
        
        if [[ -f "backend/middleware.ts" ]]; then
          cp "backend/middleware.ts" "middleware.ts"
        elif [[ -f "auth-system.ts" ]]; then
          sed -n '/=== \.\/middleware\.ts ===/,/=== /p' "auth-system.ts" | sed '1d; $d' > "middleware.ts"
        fi
        
        echo "‚úÖ Middleware organized"

    - name: Create documentation
      run: |
        echo "üìñ Creating documentation..."
        
        # README
        if [[ -f "final-pages-and-setup.ts" ]]; then
          sed -n '/=== \.\/README\.md ===/,/=== /p' "final-pages-and-setup.ts" | sed '1d; $d' > "README.md"
        fi
        
        # Project tracker
        if [[ -f "project-tracker.md" ]]; then
          cp "project-tracker.md" "docs/PROJECT_TRACKER.md"
        elif [[ -f "Family GnuCash - Project Progress Tracker.md" ]]; then
          mkdir -p docs
          cp "Family GnuCash - Project Progress Tracker.md" "docs/PROJECT_TRACKER.md"
        fi
        
        echo "‚úÖ Documentation organized"

    - name: Clean up source files
      run: |
        echo "üßπ Cleaning up source files..."
        
        # Create .gitignore if it doesn't exist
        if [[ ! -f ".gitignore" ]]; then
          cat > .gitignore << 'EOF'
        # Dependencies
        node_modules/
        npm-debug.log*
        yarn-debug.log*
        yarn-error.log*
        
        # Next.js
        .next/
        out/
        
        # Production
        build/
        dist/
        
        # Environment variables
        .env.local
        .env.development.local
        .env.test.local
        .env.production.local
        
        # Database
        *.db
        *.sqlite
        
        # IDE
        .vscode/
        .idea/
        *.swp
        *.swo
        
        # OS
        .DS_Store
        Thumbs.db
        
        # Logs
        logs/
        *.log
        
        # Prisma
        prisma/migrations/
        EOF
        fi
        
        # Remove source files that have been processed (optional)
        if [[ "${{ github.event.inputs.force_overwrite }}" == "true" ]]; then
          echo "üóëÔ∏è Removing processed source files..."
          rm -f *.ts *.tsx *.md *.json 2>/dev/null || true
          rm -rf scripts/ backend/ 2>/dev/null || true
        fi
        
        echo "‚úÖ Cleanup completed"

    - name: Validate project structure
      run: |
        echo "‚úÖ Validating project structure..."
        
        required_files=(
          "package.json"
          "next.config.js"
          "tailwind.config.js"
          "tsconfig.json"
          "prisma/schema.prisma"
          "app/layout.tsx"
          "app/dashboard/page.tsx"
          "app/login/page.tsx"
          "app/api/auth/[...nextauth]/route.ts"
          "components/Navigation.tsx"
          "lib/auth.ts"
          "lib/database.ts"
          "middleware.ts"
        )
        
        missing_files=()
        for file in "${required_files[@]}"; do
          if [[ ! -f "$file" ]]; then
            missing_files+=("$file")
          fi
        done
        
        if [[ ${#missing_files[@]} -eq 0 ]]; then
          echo "‚úÖ All required files are present!"
        else
          echo "‚ö†Ô∏è Missing files:"
          printf '%s\n' "${missing_files[@]}"
        fi
        
        echo "üìÅ Current project structure:"
        tree -I 'node_modules|.git|.next' -L 3 || ls -la

    - name: Commit organized files
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        git add .
        
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "üèóÔ∏è Organize Family GnuCash project files into Next.js structure
          
          - Created proper Next.js 14 directory structure
          - Organized app pages and API routes  
          - Moved components and utilities to correct locations
          - Set up Prisma schema and configuration files
          - Added proper TypeScript and Tailwind configuration
          - Created documentation and project tracker
          
          Project is now ready for development with:
          - Authentication system (NextAuth.js)
          - Database integration (Prisma + MySQL)
          - Admin panel and user management
          - Complete accounting features
          - Google Drive backup integration"
          
          git push
        fi

    - name: Create setup instructions
      run: |
        echo "üìã Creating setup instructions..."
        
        cat > SETUP.md << 'EOF'
        # Family GnuCash - Setup Instructions
        
        ## Quick Start
        
        1. **Install Dependencies**
           ```bash
           npm install
           ```
        
        2. **Setup Environment**
           ```bash
           cp .env.local.example .env.local
           # Edit .env.local with your database and API keys
           ```
        
        3. **Setup Database**
           ```bash
           npx prisma generate
           npx prisma db push
           npx prisma db seed
           ```
        
        4. **Start Development Server**
           ```bash
           npm run dev
           ```
        
        5. **Open Application**
           - Visit http://localhost:3000
           - Login with: admin / admin123
        
        ## Project Structure
        
        ```
        family-gnucash/
        ‚îú‚îÄ‚îÄ app/                    # Next.js 14 App Router
        ‚îÇ   ‚îú‚îÄ‚îÄ admin/             # Admin panel pages
        ‚îÇ   ‚îú‚îÄ‚îÄ api/               # API routes
        ‚îÇ   ‚îú‚îÄ‚îÄ dashboard/         # Main dashboard
        ‚îÇ   ‚îú‚îÄ‚îÄ login/             # Authentication
        ‚îÇ   ‚îî‚îÄ‚îÄ ...                # Other accounting pages
        ‚îú‚îÄ‚îÄ components/            # Reusable React components  
        ‚îú‚îÄ‚îÄ lib/                   # Utilities and database
        ‚îú‚îÄ‚îÄ prisma/               # Database schema and migrations
        ‚îú‚îÄ‚îÄ types/                # TypeScript type definitions
        ‚îî‚îÄ‚îÄ docs/                 # Documentation
        ```
        
        ## Features
        
        - üîí Password-protected family accounting
        - üìä Double-entry bookkeeping system
        - üí∞ Budget tracking and variance reporting
        - üìà Financial reports (P&L, Balance Sheet)
        - üîÑ Account reconciliation
        - üìÅ Import/Export (CSV, OFX, QIF, GnuCash XML)
        - ‚òÅÔ∏è Google Drive backup integration
        - üë• Multi-user support with role-based access
        - üõ°Ô∏è Admin panel for system configuration
        
        ## Next Steps
        
        1. Configure your MySQL database connection
        2. Set up Google Drive API for backups (optional)
        3. Customize the chart of accounts for your family
        4. Create additional user accounts for family members
        5. Start recording your financial transactions!
        
        For detailed documentation, see `docs/PROJECT_TRACKER.md`
        EOF
        
        git add SETUP.md
        git commit -m "üìã Add setup instructions" || echo "No changes to commit"
        git push || echo "Nothing to push"
        
        echo "‚úÖ Setup complete! Check SETUP.md for next steps."