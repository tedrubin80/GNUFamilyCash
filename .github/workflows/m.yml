#!/bin/bash

# fix-family-gnucash.sh
# Script to fix and organize Family GnuCash project files

set -e

echo "üîß Fixing Family GnuCash project..."

# First, remove all corrupted files
echo "üóëÔ∏è Removing corrupted files..."
rm -f app/accounts/page.tsx
rm -f app/admin/page.tsx
rm -f app/admin/users/page.tsx
rm -f app/admin/settings/page.tsx
rm -f app/api/admin/users/route.ts
rm -f app/import-export/page.tsx
rm -f "app/api/transactions/[id]/reconcile/route.ts"

# Remove duplicate workflows
echo "üóëÔ∏è Removing duplicate workflows..."
rm -f .github/workflows/main.yml
rm -f .github/workflows/organize-files.yml

# Remove the incomplete setup.sh
rm -f setup.sh

# Create clean directory structure
echo "üìÅ Creating directory structure..."
mkdir -p app/{admin,api,accounts,budgets,dashboard,login,reports,transactions,reconciliation,import-export}
mkdir -p app/admin/{users,settings}
mkdir -p app/api/{auth,admin,accounts,transactions,budgets,import,export}
mkdir -p "app/api/auth/[...nextauth]"
mkdir -p app/api/admin/{users,settings}
mkdir -p "app/api/transactions/[id]/reconcile"
mkdir -p components
mkdir -p lib
mkdir -p types
mkdir -p public
mkdir -p docs

# Function to extract sections from combined files
extract_section() {
    local source_file=$1
    local section_marker=$2
    local dest_file=$3
    
    if [ -f "$source_file" ]; then
        echo "üìÑ Extracting $dest_file from $source_file"
        # Create directory if needed
        mkdir -p "$(dirname "$dest_file")"
        
        # Extract content between markers
        awk -v marker="=== ./$section_marker ===" '
            $0 ~ marker {found=1; next}
            /^=== \./ && found {exit}
            found {print}
        ' "$source_file" > "$dest_file"
        
        if [ -s "$dest_file" ]; then
            echo "‚úÖ Extracted $dest_file"
        else
            echo "‚ö†Ô∏è No content found for $dest_file"
            rm -f "$dest_file"
        fi
    fi
}

# Extract from main-app-pages.ts
echo "üì¶ Processing main-app-pages.ts..."
extract_section "main-app-pages.ts" "app/layout.tsx" "app/layout.tsx"
extract_section "main-app-pages.ts" "app/globals.css" "app/globals.css"
extract_section "main-app-pages.ts" "app/providers.tsx" "app/providers.tsx"
extract_section "main-app-pages.ts" "app/accounts/page.tsx" "app/accounts/page.tsx"
extract_section "main-app-pages.ts" "app/transactions/page.tsx" "app/transactions/page.tsx"

# Extract from auth-system.ts
echo "üì¶ Processing auth-system.ts..."
extract_section "auth-system.ts" "lib/auth.ts" "lib/auth.ts"
extract_section "auth-system.ts" "app/api/auth/\[...nextauth\]/route.ts" "app/api/auth/[...nextauth]/route.ts"
extract_section "auth-system.ts" "middleware.ts" "middleware.ts"

# Extract from components-and-apis.ts
echo "üì¶ Processing components-and-apis.ts..."
extract_section "components-and-apis.ts" "components/Navigation.tsx" "components/Navigation.tsx"
extract_section "components-and-apis.ts" "components/AccountsList.tsx" "components/AccountsList.tsx"
extract_section "components-and-apis.ts" "components/AddAccountForm.tsx" "components/AddAccountForm.tsx"
extract_section "components-and-apis.ts" "components/TransactionsList.tsx" "components/TransactionsList.tsx"
extract_section "components-and-apis.ts" "components/AddTransactionForm.tsx" "components/AddTransactionForm.tsx"
extract_section "components-and-apis.ts" "components/TransactionFilters.tsx" "components/TransactionFilters.tsx"
extract_section "components-and-apis.ts" "app/api/accounts/route.ts" "app/api/accounts/route.ts"
extract_section "components-and-apis.ts" "app/api/transactions/route.ts" "app/api/transactions/route.ts"

# Extract from database-utils.ts
echo "üì¶ Processing database-utils.ts..."
extract_section "database-utils.ts" "lib/database.ts" "lib/database.ts"
extract_section "database-utils.ts" "lib/utils.ts" "lib/utils.ts"
extract_section "database-utils.ts" "lib/google-drive.ts" "lib/google-drive.ts"
extract_section "database-utils.ts" "types/index.ts" "types/index.ts"

# Extract from admin-panel.ts
echo "üì¶ Processing admin-panel.ts..."
extract_section "admin-panel.ts" "app/admin/page.tsx" "app/admin/page.tsx"
extract_section "admin-panel.ts" "app/admin/users/page.tsx" "app/admin/users/page.tsx"
extract_section "admin-panel.ts" "app/admin/settings/page.tsx" "app/admin/settings/page.tsx"
extract_section "admin-panel.ts" "app/api/admin/users/route.ts" "app/api/admin/users/route.ts"

# Extract from final-pages-and-setup.ts
echo "üì¶ Processing final-pages-and-setup.ts..."
extract_section "final-pages-and-setup.ts" "app/budgets/page.tsx" "app/budgets/page.tsx"
extract_section "final-pages-and-setup.ts" "app/reports/page.tsx" "app/reports/page.tsx"
extract_section "final-pages-and-setup.ts" "app/reconciliation/page.tsx" "app/reconciliation/page.tsx"
extract_section "final-pages-and-setup.ts" "app/import-export/page.tsx" "app/import-export/page.tsx"
extract_section "final-pages-and-setup.ts" "app/api/transactions/\[id\]/reconcile/route.ts" "app/api/transactions/[id]/reconcile/route.ts"

# Handle individual files
echo "üì¶ Processing individual files..."
[ -f "app/dashboard/dashboard-page.ts" ] && mv "app/dashboard/dashboard-page.ts" "app/dashboard/page.tsx"
[ -f "app/login/login-page.ts" ] && mv "app/login/login-page.ts" "app/login/page.tsx"
[ -f "app/layout.ts" ] && mv "app/layout.ts" "app/layout.tsx"
[ -f "app/providers.ts" ] && mv "app/providers.ts" "app/providers.tsx"
[ -f "components/Navigation.tsx" ] || [ -f "components/navigation-component.ts" ] && mv "components/navigation-component.ts" "components/Navigation.tsx" 2>/dev/null || true

# Move documentation
[ -f "Family GnuCash - Project Progress Tracker.md" ] && mv "Family GnuCash - Project Progress Tracker.md" "docs/PROJECT_TRACKER.md"

# Validate critical files
echo "‚úîÔ∏è Validating critical files..."
critical_files=(
    "app/layout.tsx"
    "app/dashboard/page.tsx"
    "app/login/page.tsx"
    "app/api/auth/[...nextauth]/route.ts"
    "components/Navigation.tsx"
    "lib/auth.ts"
    "lib/database.ts"
    "middleware.ts"
)

missing=0
for file in "${critical_files[@]}"; do
    if [ ! -f "$file" ]; then
        echo "‚ùå Missing: $file"
        missing=$((missing + 1))
    else
        echo "‚úÖ Found: $file"
    fi
done

echo ""
echo "========================================"
if [ $missing -eq 0 ]; then
    echo "‚úÖ All critical files extracted successfully!"
else
    echo "‚ö†Ô∏è Some files are missing. Check the source files."
fi
echo "========================================"

# Optional: Remove source files
echo ""
read -p "Remove source TypeScript files? (y/N) " -n 1 -r
echo ""
if [[ $REPLY =~ ^[Yy]$ ]]; then
    rm -f main-app-pages.ts auth-system.ts components-and-apis.ts 
    rm -f database-utils.ts admin-panel.ts final-pages-and-setup.ts
    rm -f family-gnucash.tsx
    echo "‚úÖ Source files removed"
fi

echo ""
echo "üéâ Project structure fixed!"
echo ""
echo "Next steps:"
echo "1. Review the extracted files"
echo "2. Run: npm install"
echo "3. Configure .env.local"
echo "4. Set up your database"
echo "5. Run: npm run dev"