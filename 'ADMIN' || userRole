'USER'

  const toggleReconciled = async (transactionId: string) => {
    if (!canEdit) return

    try {
      await fetch(`/api/transactions/${transactionId}/reconcile`, {
        method: 'PATCH'
      })
      // Refresh page or update state
      window.location.reload()
    } catch (error) {
      alert('Error updating transaction')
    }
  }

  return (
    <div className="bg-white rounded-lg shadow-sm border overflow-hidden">
      <div className="overflow-x-auto">
        <table className="w-full">
          <thead className="bg-gray-50">
            <tr>
              <th className="text-left p-4 font-medium text-gray-900">Date</th>
              <th className="text-left p-4 font-medium text-gray-900">Description</th>
              <th className="text-left p-4 font-medium text-gray-900">Account</th>
              <th className="text-right p-4 font-medium text-gray-900">Debit</th>
              <th className="text-right p-4 font-medium text-gray-900">Credit</th>
              <th className="text-center p-4 font-medium text-gray-900">Status</th>
              {canEdit && (
                <th className="text-center p-4 font-medium text-gray-900">Actions</th>
              )}
            </tr>
          </thead>
          <tbody>
            {transactions.flatMap(transaction =>
              transaction.splits.map((split, index) => (
                <tr key={`${transaction.id}-${index}`} className="border-b">
                  <td className="p-4">{formatDate(transaction.date)}</td>
                  <td className="p-4 font-medium">{transaction.description}</td>
                  <td className="p-4">{split.account.name}</td>
                  <td className="p-4 text-right">
                    {split.debit > 0 ? formatCurrency(split.debit) : ''}
                  </td>
                  <td className="p-4 text-right">
                    {split.credit > 0 ? formatCurrency(split.credit) : ''}
                  </td>
                  <td className="p-4 text-center">
                    {transaction.reconciled ? (
                      <CheckSquare className="w-4 h-4 text-green-600 mx-auto" />
                    ) : (
                      <Square className="w-4 h-4 text-gray-400 mx-auto" />
                    )}
                  </td>
                  {canEdit && index === 0 && (
                    <td className="p-4 text-center">
                      <button
                        onClick={() => toggleReconciled(transaction.id)}
                        className="text-blue-600 hover:text-blue-700 text-sm"
                      >
                        {transaction.reconciled ? 'Unreconcile' : 'Reconcile'}
                      </button>
                    </td>
                  )}
                  {canEdit && index > 0 && <td className="p-4"></td>}
                </tr>
              ))
            )}
          </tbody>
        </table>
      </div>
      
      {transactions.length === 0 && (
        <div className="text-center py-8 text-gray-500">
          No transactions found
        </div>
      )}
    </div>
  )
}

//